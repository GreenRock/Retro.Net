// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.command.debugger.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Command.Debugger {

  /// <summary>Holder for reflection information generated from gameboy.command.debugger.proto</summary>
  public static partial class GameboyCommandDebuggerReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.command.debugger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyCommandDebuggerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5nYW1lYm95LmNvbW1hbmQuZGVidWdnZXIucHJvdG8iIAoNQWRkQnJlYWtw",
            "b2ludBIPCgdhZGRyZXNzGAEgASgNIiMKEFJlbW92ZUJyZWFrcG9pbnQSDwoH",
            "YWRkcmVzcxgBIAEoDSIlCg5HZXRCcmVha3BvaW50cxITCgticmVha3BvaW50",
            "cxgBIAMoDSo5Cg9EZWJ1Z2dlckNvbW1hbmQSCQoFQlJFQUsQABIMCghDT05U",
            "SU5VRRABEg0KCVNURVBfT1ZFUhACQjOqAjBSZXRyby5OZXQuQXBpLlJlYWxU",
            "aW1lLk1lc3NhZ2VzLkNvbW1hbmQuRGVidWdnZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Retro.Net.Api.RealTime.Messages.Command.Debugger.DebuggerCommand), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.Debugger.AddBreakpoint), global::Retro.Net.Api.RealTime.Messages.Command.Debugger.AddBreakpoint.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.Debugger.RemoveBreakpoint), global::Retro.Net.Api.RealTime.Messages.Command.Debugger.RemoveBreakpoint.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.Debugger.GetBreakpoints), global::Retro.Net.Api.RealTime.Messages.Command.Debugger.GetBreakpoints.Parser, new[]{ "Breakpoints" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A debugger command.
  /// </summary>
  public enum DebuggerCommand {
    /// <summary>
    /// Break immediately.
    /// </summary>
    [pbr::OriginalName("BREAK")] Break = 0,
    /// <summary>
    /// Continue execution until another break.
    /// </summary>
    [pbr::OriginalName("CONTINUE")] Continue = 1,
    /// <summary>
    /// Continue execution by one step.
    /// </summary>
    [pbr::OriginalName("STEP_OVER")] StepOver = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Adds a breakpoint to the debugger.
  /// </summary>
  public sealed partial class AddBreakpoint : pb::IMessage<AddBreakpoint> {
    private static readonly pb::MessageParser<AddBreakpoint> _parser = new pb::MessageParser<AddBreakpoint>(() => new AddBreakpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddBreakpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.Debugger.GameboyCommandDebuggerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBreakpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBreakpoint(AddBreakpoint other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBreakpoint Clone() {
      return new AddBreakpoint(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    /// <summary>
    /// The address of the breakpoint to add.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddBreakpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddBreakpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddBreakpoint other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Removes a breakpoint from the debugger.
  /// </summary>
  public sealed partial class RemoveBreakpoint : pb::IMessage<RemoveBreakpoint> {
    private static readonly pb::MessageParser<RemoveBreakpoint> _parser = new pb::MessageParser<RemoveBreakpoint>(() => new RemoveBreakpoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveBreakpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.Debugger.GameboyCommandDebuggerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBreakpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBreakpoint(RemoveBreakpoint other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveBreakpoint Clone() {
      return new RemoveBreakpoint(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    /// <summary>
    /// The address of the breakpoint to remove.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveBreakpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveBreakpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveBreakpoint other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Gets all defined breakpoints.
  /// </summary>
  public sealed partial class GetBreakpoints : pb::IMessage<GetBreakpoints> {
    private static readonly pb::MessageParser<GetBreakpoints> _parser = new pb::MessageParser<GetBreakpoints>(() => new GetBreakpoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBreakpoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.Debugger.GameboyCommandDebuggerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpoints(GetBreakpoints other) : this() {
      breakpoints_ = other.breakpoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBreakpoints Clone() {
      return new GetBreakpoints(this);
    }

    /// <summary>Field number for the "breakpoints" field.</summary>
    public const int BreakpointsFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_breakpoints_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> breakpoints_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// All defined breakpoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Breakpoints {
      get { return breakpoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBreakpoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBreakpoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!breakpoints_.Equals(other.breakpoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= breakpoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      breakpoints_.WriteTo(output, _repeated_breakpoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += breakpoints_.CalculateSize(_repeated_breakpoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBreakpoints other) {
      if (other == null) {
        return;
      }
      breakpoints_.Add(other.breakpoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            breakpoints_.AddEntriesFrom(input, _repeated_breakpoints_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
