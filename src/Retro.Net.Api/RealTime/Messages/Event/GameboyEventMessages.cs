// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.event.messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Event {

  /// <summary>Holder for reflection information generated from gameboy.event.messages.proto</summary>
  public static partial class GameboyEventMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.event.messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyEventMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxnYW1lYm95LmV2ZW50Lm1lc3NhZ2VzLnByb3RvGiZnYW1lYm95LmV2ZW50",
            "LmRlYnVnZ2VyLnJlZ2lzdGVycy5wcm90bxogZ2FtZWJveS5ldmVudC5kZWJ1",
            "Z2dlci5ncHUucHJvdG8aIWdhbWVib3kuZXZlbnQuZGVidWdnZXIuY29yZS5w",
            "cm90byI4Cg9HYW1lQm95R3B1RnJhbWUSDAoEZGF0YRgBIAEoDBIXCg9mcmFt",
            "ZXNQZXJTZWNvbmQYAiABKAUiQwoXR2FtZUJveVB1Ymxpc2hlZE1lc3NhZ2US",
            "DAoEdXNlchgBIAEoCRIMCgRkYXRlGAIgASgDEgwKBGJvZHkYAyABKAkiJQoS",
            "R2FtZUJveVNlcnZlckVycm9yEg8KB3JlYXNvbnMYASADKAkiKQoSR2FtZUJv",
            "eUNsaWVudFN0YXRlEhMKC2Rpc3BsYXlOYW1lGAEgASgJIqQBChRHYW1lQm95",
            "RGVidWdnZXJFdmVudBIkCglyZWdpc3RlcnMYASABKAsyES5HYW1lQm95UmVn",
            "aXN0ZXJzEg4KBm1lbW9yeRgCIAEoDBIiCghncHVTdGF0ZRgDIAEoCzIQLkdh",
            "bWVCb3lHcHVTdGF0ZRIyChBpbnN0cnVjdGlvbkJsb2NrGAQgASgLMhguR2Ft",
            "ZUJveUluc3RydWN0aW9uQmxvY2tCKKoCJVJldHJvLk5ldC5BcGkuUmVhbFRp",
            "bWUuTWVzc2FnZXMuRXZlbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameboyEventDebuggerRegistersReflection.Descriptor, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameboyEventDebuggerCoreReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.GameBoyGpuFrame), global::Retro.Net.Api.RealTime.Messages.Event.GameBoyGpuFrame.Parser, new[]{ "Data", "FramesPerSecond" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.GameBoyPublishedMessage), global::Retro.Net.Api.RealTime.Messages.Event.GameBoyPublishedMessage.Parser, new[]{ "User", "Date", "Body" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.GameBoyServerError), global::Retro.Net.Api.RealTime.Messages.Event.GameBoyServerError.Parser, new[]{ "Reasons" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.GameBoyClientState), global::Retro.Net.Api.RealTime.Messages.Event.GameBoyClientState.Parser, new[]{ "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.GameBoyDebuggerEvent), global::Retro.Net.Api.RealTime.Messages.Event.GameBoyDebuggerEvent.Parser, new[]{ "Registers", "Memory", "GpuState", "InstructionBlock" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A single GameBoy GPU frame.
  /// </summary>
  public sealed partial class GameBoyGpuFrame : pb::IMessage<GameBoyGpuFrame> {
    private static readonly pb::MessageParser<GameBoyGpuFrame> _parser = new pb::MessageParser<GameBoyGpuFrame>(() => new GameBoyGpuFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyGpuFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.GameboyEventMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuFrame(GameBoyGpuFrame other) : this() {
      data_ = other.data_;
      framesPerSecond_ = other.framesPerSecond_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuFrame Clone() {
      return new GameBoyGpuFrame(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// The raw GameBoy GPU frame data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "framesPerSecond" field.</summary>
    public const int FramesPerSecondFieldNumber = 2;
    private int framesPerSecond_;
    /// <summary>
    /// The current frames per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FramesPerSecond {
      get { return framesPerSecond_; }
      set {
        framesPerSecond_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyGpuFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyGpuFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (FramesPerSecond != other.FramesPerSecond) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (FramesPerSecond != 0) hash ^= FramesPerSecond.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (FramesPerSecond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FramesPerSecond);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (FramesPerSecond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FramesPerSecond);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyGpuFrame other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.FramesPerSecond != 0) {
        FramesPerSecond = other.FramesPerSecond;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 16: {
            FramesPerSecond = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A text message published to all connected GameBoy clients by Retro.Net.Api.
  /// </summary>
  public sealed partial class GameBoyPublishedMessage : pb::IMessage<GameBoyPublishedMessage> {
    private static readonly pb::MessageParser<GameBoyPublishedMessage> _parser = new pb::MessageParser<GameBoyPublishedMessage>(() => new GameBoyPublishedMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyPublishedMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.GameboyEventMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyPublishedMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyPublishedMessage(GameBoyPublishedMessage other) : this() {
      user_ = other.user_;
      date_ = other.date_;
      body_ = other.body_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyPublishedMessage Clone() {
      return new GameBoyPublishedMessage(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private string user_ = "";
    /// <summary>
    /// The user associated with this message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string User {
      get { return user_; }
      set {
        user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date" field.</summary>
    public const int DateFieldNumber = 2;
    private long date_;
    /// <summary>
    /// The UTC epoch milliseconds that this message was published.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Date {
      get { return date_; }
      set {
        date_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 3;
    private string body_ = "";
    /// <summary>
    /// The message body.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Body {
      get { return body_; }
      set {
        body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyPublishedMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyPublishedMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (User != other.User) return false;
      if (Date != other.Date) return false;
      if (Body != other.Body) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (User.Length != 0) hash ^= User.GetHashCode();
      if (Date != 0L) hash ^= Date.GetHashCode();
      if (Body.Length != 0) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (User.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(User);
      }
      if (Date != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Date);
      }
      if (Body.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (User.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
      }
      if (Date != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Date);
      }
      if (Body.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyPublishedMessage other) {
      if (other == null) {
        return;
      }
      if (other.User.Length != 0) {
        User = other.User;
      }
      if (other.Date != 0L) {
        Date = other.Date;
      }
      if (other.Body.Length != 0) {
        Body = other.Body;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            User = input.ReadString();
            break;
          }
          case 16: {
            Date = input.ReadInt64();
            break;
          }
          case 26: {
            Body = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An error message published to all connected GameBoy clients by Retro.Net.Api.
  /// </summary>
  public sealed partial class GameBoyServerError : pb::IMessage<GameBoyServerError> {
    private static readonly pb::MessageParser<GameBoyServerError> _parser = new pb::MessageParser<GameBoyServerError>(() => new GameBoyServerError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyServerError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.GameboyEventMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyServerError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyServerError(GameBoyServerError other) : this() {
      reasons_ = other.reasons_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyServerError Clone() {
      return new GameBoyServerError(this);
    }

    /// <summary>Field number for the "reasons" field.</summary>
    public const int ReasonsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_reasons_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> reasons_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The reasons that caused this error.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reasons {
      get { return reasons_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyServerError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyServerError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reasons_.Equals(other.reasons_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reasons_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      reasons_.WriteTo(output, _repeated_reasons_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reasons_.CalculateSize(_repeated_reasons_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyServerError other) {
      if (other == null) {
        return;
      }
      reasons_.Add(other.reasons_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reasons_.AddEntriesFrom(input, _repeated_reasons_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The state of a GameBoy websocket connection.
  /// </summary>
  public sealed partial class GameBoyClientState : pb::IMessage<GameBoyClientState> {
    private static readonly pb::MessageParser<GameBoyClientState> _parser = new pb::MessageParser<GameBoyClientState>(() => new GameBoyClientState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyClientState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.GameboyEventMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyClientState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyClientState(GameBoyClientState other) : this() {
      displayName_ = other.displayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyClientState Clone() {
      return new GameBoyClientState(this);
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 1;
    private string displayName_ = "";
    /// <summary>
    /// The display name associated with the connected GameBoy client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyClientState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyClientState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayName != other.DisplayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyClientState other) {
      if (other == null) {
        return;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A debugger event.
  /// </summary>
  public sealed partial class GameBoyDebuggerEvent : pb::IMessage<GameBoyDebuggerEvent> {
    private static readonly pb::MessageParser<GameBoyDebuggerEvent> _parser = new pb::MessageParser<GameBoyDebuggerEvent>(() => new GameBoyDebuggerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyDebuggerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.GameboyEventMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyDebuggerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyDebuggerEvent(GameBoyDebuggerEvent other) : this() {
      Registers = other.registers_ != null ? other.Registers.Clone() : null;
      memory_ = other.memory_;
      GpuState = other.gpuState_ != null ? other.GpuState.Clone() : null;
      InstructionBlock = other.instructionBlock_ != null ? other.InstructionBlock.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyDebuggerEvent Clone() {
      return new GameBoyDebuggerEvent(this);
    }

    /// <summary>Field number for the "registers" field.</summary>
    public const int RegistersFieldNumber = 1;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters registers_;
    /// <summary>
    /// The current state of the GameBoy CPU registers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters Registers {
      get { return registers_; }
      set {
        registers_ = value;
      }
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 2;
    private pb::ByteString memory_ = pb::ByteString.Empty;
    /// <summary>
    /// A dump pf the enture address space (64k).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Memory {
      get { return memory_; }
      set {
        memory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gpuState" field.</summary>
    public const int GpuStateFieldNumber = 3;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState gpuState_;
    /// <summary>
    /// A structured dump of the current GPU state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState GpuState {
      get { return gpuState_; }
      set {
        gpuState_ = value;
      }
    }

    /// <summary>Field number for the "instructionBlock" field.</summary>
    public const int InstructionBlockFieldNumber = 4;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock instructionBlock_;
    /// <summary>
    /// The current instruction block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock InstructionBlock {
      get { return instructionBlock_; }
      set {
        instructionBlock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyDebuggerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyDebuggerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Registers, other.Registers)) return false;
      if (Memory != other.Memory) return false;
      if (!object.Equals(GpuState, other.GpuState)) return false;
      if (!object.Equals(InstructionBlock, other.InstructionBlock)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (registers_ != null) hash ^= Registers.GetHashCode();
      if (Memory.Length != 0) hash ^= Memory.GetHashCode();
      if (gpuState_ != null) hash ^= GpuState.GetHashCode();
      if (instructionBlock_ != null) hash ^= InstructionBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (registers_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Registers);
      }
      if (Memory.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Memory);
      }
      if (gpuState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GpuState);
      }
      if (instructionBlock_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(InstructionBlock);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (registers_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Registers);
      }
      if (Memory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Memory);
      }
      if (gpuState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpuState);
      }
      if (instructionBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstructionBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyDebuggerEvent other) {
      if (other == null) {
        return;
      }
      if (other.registers_ != null) {
        if (registers_ == null) {
          registers_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters();
        }
        Registers.MergeFrom(other.Registers);
      }
      if (other.Memory.Length != 0) {
        Memory = other.Memory;
      }
      if (other.gpuState_ != null) {
        if (gpuState_ == null) {
          gpuState_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState();
        }
        GpuState.MergeFrom(other.GpuState);
      }
      if (other.instructionBlock_ != null) {
        if (instructionBlock_ == null) {
          instructionBlock_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock();
        }
        InstructionBlock.MergeFrom(other.InstructionBlock);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (registers_ == null) {
              registers_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters();
            }
            input.ReadMessage(registers_);
            break;
          }
          case 18: {
            Memory = input.ReadBytes();
            break;
          }
          case 26: {
            if (gpuState_ == null) {
              gpuState_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState();
            }
            input.ReadMessage(gpuState_);
            break;
          }
          case 34: {
            if (instructionBlock_ == null) {
              instructionBlock_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock();
            }
            input.ReadMessage(instructionBlock_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
