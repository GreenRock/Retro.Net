// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.event.debugger.registers.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers {

  /// <summary>Holder for reflection information generated from gameboy.event.debugger.registers.proto</summary>
  public static partial class GameboyEventDebuggerRegistersReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.event.debugger.registers.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyEventDebuggerRegistersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZnYW1lYm95LmV2ZW50LmRlYnVnZ2VyLnJlZ2lzdGVycy5wcm90byKCAgoQ",
            "R2FtZUJveVJlZ2lzdGVycxIJCgFBGAEgASgNEgkKAUIYAiABKA0SCQoBQxgD",
            "IAEoDRIJCgFEGAQgASgNEgkKAUUYBSABKA0SCQoBSBgGIAEoDRIJCgFMGAcg",
            "ASgNEiQKBUZsYWdzGAggASgLMhUuR2FtZUJveUZsYWdzUmVnaXN0ZXISFgoO",
            "cHJvZ3JhbUNvdW50ZXIYCSABKA0SFAoMc3RhY2tQb2ludGVyGAogASgNEhoK",
            "EmludGVycnVwdEZsaXBGbG9wMRgLIAEoCBIaChJpbnRlcnJ1cHRGbGlwRmxv",
            "cDIYDCABKAgSFQoNaW50ZXJydXB0TW9kZRgNIAEoDSJYChRHYW1lQm95Rmxh",
            "Z3NSZWdpc3RlchIMCgR6ZXJvGAEgASgIEhEKCWhhbGZDYXJyeRgCIAEoCBIQ",
            "CghzdWJ0cmFjdBgDIAEoCBINCgVjYXJyeRgEIAEoCEI7qgI4UmV0cm8uTmV0",
            "LkFwaS5SZWFsVGltZS5NZXNzYWdlcy5FdmVudC5EZWJ1Z2dlci5SZWdpc3Rl",
            "cnNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyRegisters.Parser, new[]{ "A", "B", "C", "D", "E", "H", "L", "Flags", "ProgramCounter", "StackPointer", "InterruptFlipFlop1", "InterruptFlipFlop2", "InterruptMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister.Parser, new[]{ "Zero", "HalfCarry", "Subtract", "Carry" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The current state of the GameBoy CPU registers.
  /// </summary>
  public sealed partial class GameBoyRegisters : pb::IMessage<GameBoyRegisters> {
    private static readonly pb::MessageParser<GameBoyRegisters> _parser = new pb::MessageParser<GameBoyRegisters>(() => new GameBoyRegisters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyRegisters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameboyEventDebuggerRegistersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRegisters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRegisters(GameBoyRegisters other) : this() {
      a_ = other.a_;
      b_ = other.b_;
      c_ = other.c_;
      d_ = other.d_;
      e_ = other.e_;
      h_ = other.h_;
      l_ = other.l_;
      Flags = other.flags_ != null ? other.Flags.Clone() : null;
      programCounter_ = other.programCounter_;
      stackPointer_ = other.stackPointer_;
      interruptFlipFlop1_ = other.interruptFlipFlop1_;
      interruptFlipFlop2_ = other.interruptFlipFlop2_;
      interruptMode_ = other.interruptMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRegisters Clone() {
      return new GameBoyRegisters(this);
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 1;
    private uint a_;
    /// <summary>
    /// Accumulator register.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 2;
    private uint b_;
    /// <summary>
    /// General purpose register B.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "C" field.</summary>
    public const int CFieldNumber = 3;
    private uint c_;
    /// <summary>
    /// General purpose register C.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint C {
      get { return c_; }
      set {
        c_ = value;
      }
    }

    /// <summary>Field number for the "D" field.</summary>
    public const int DFieldNumber = 4;
    private uint d_;
    /// <summary>
    /// General purpose register D.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    /// <summary>Field number for the "E" field.</summary>
    public const int EFieldNumber = 5;
    private uint e_;
    /// <summary>
    /// General purpose register E.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint E {
      get { return e_; }
      set {
        e_ = value;
      }
    }

    /// <summary>Field number for the "H" field.</summary>
    public const int HFieldNumber = 6;
    private uint h_;
    /// <summary>
    /// General purpose register H.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    /// <summary>Field number for the "L" field.</summary>
    public const int LFieldNumber = 7;
    private uint l_;
    /// <summary>
    /// General purpose register L.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint L {
      get { return l_; }
      set {
        l_ = value;
      }
    }

    /// <summary>Field number for the "Flags" field.</summary>
    public const int FlagsFieldNumber = 8;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister flags_;
    /// <summary>
    /// The flags register.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "programCounter" field.</summary>
    public const int ProgramCounterFieldNumber = 9;
    private uint programCounter_;
    /// <summary>
    /// The program counter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProgramCounter {
      get { return programCounter_; }
      set {
        programCounter_ = value;
      }
    }

    /// <summary>Field number for the "stackPointer" field.</summary>
    public const int StackPointerFieldNumber = 10;
    private uint stackPointer_;
    /// <summary>
    /// The stack pointer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StackPointer {
      get { return stackPointer_; }
      set {
        stackPointer_ = value;
      }
    }

    /// <summary>Field number for the "interruptFlipFlop1" field.</summary>
    public const int InterruptFlipFlop1FieldNumber = 11;
    private bool interruptFlipFlop1_;
    /// <summary>
    /// The interrupt flip flop 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InterruptFlipFlop1 {
      get { return interruptFlipFlop1_; }
      set {
        interruptFlipFlop1_ = value;
      }
    }

    /// <summary>Field number for the "interruptFlipFlop2" field.</summary>
    public const int InterruptFlipFlop2FieldNumber = 12;
    private bool interruptFlipFlop2_;
    /// <summary>
    /// The interrupt flip flop 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InterruptFlipFlop2 {
      get { return interruptFlipFlop2_; }
      set {
        interruptFlipFlop2_ = value;
      }
    }

    /// <summary>Field number for the "interruptMode" field.</summary>
    public const int InterruptModeFieldNumber = 13;
    private uint interruptMode_;
    /// <summary>
    /// The interrupt mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InterruptMode {
      get { return interruptMode_; }
      set {
        interruptMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyRegisters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyRegisters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (A != other.A) return false;
      if (B != other.B) return false;
      if (C != other.C) return false;
      if (D != other.D) return false;
      if (E != other.E) return false;
      if (H != other.H) return false;
      if (L != other.L) return false;
      if (!object.Equals(Flags, other.Flags)) return false;
      if (ProgramCounter != other.ProgramCounter) return false;
      if (StackPointer != other.StackPointer) return false;
      if (InterruptFlipFlop1 != other.InterruptFlipFlop1) return false;
      if (InterruptFlipFlop2 != other.InterruptFlipFlop2) return false;
      if (InterruptMode != other.InterruptMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (A != 0) hash ^= A.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (C != 0) hash ^= C.GetHashCode();
      if (D != 0) hash ^= D.GetHashCode();
      if (E != 0) hash ^= E.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (L != 0) hash ^= L.GetHashCode();
      if (flags_ != null) hash ^= Flags.GetHashCode();
      if (ProgramCounter != 0) hash ^= ProgramCounter.GetHashCode();
      if (StackPointer != 0) hash ^= StackPointer.GetHashCode();
      if (InterruptFlipFlop1 != false) hash ^= InterruptFlipFlop1.GetHashCode();
      if (InterruptFlipFlop2 != false) hash ^= InterruptFlipFlop2.GetHashCode();
      if (InterruptMode != 0) hash ^= InterruptMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (A != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(A);
      }
      if (B != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(B);
      }
      if (C != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(C);
      }
      if (D != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(D);
      }
      if (E != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(E);
      }
      if (H != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(H);
      }
      if (L != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(L);
      }
      if (flags_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Flags);
      }
      if (ProgramCounter != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(ProgramCounter);
      }
      if (StackPointer != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(StackPointer);
      }
      if (InterruptFlipFlop1 != false) {
        output.WriteRawTag(88);
        output.WriteBool(InterruptFlipFlop1);
      }
      if (InterruptFlipFlop2 != false) {
        output.WriteRawTag(96);
        output.WriteBool(InterruptFlipFlop2);
      }
      if (InterruptMode != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(InterruptMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (A != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(A);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (C != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(C);
      }
      if (D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(D);
      }
      if (E != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(E);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(H);
      }
      if (L != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(L);
      }
      if (flags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Flags);
      }
      if (ProgramCounter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProgramCounter);
      }
      if (StackPointer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StackPointer);
      }
      if (InterruptFlipFlop1 != false) {
        size += 1 + 1;
      }
      if (InterruptFlipFlop2 != false) {
        size += 1 + 1;
      }
      if (InterruptMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InterruptMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyRegisters other) {
      if (other == null) {
        return;
      }
      if (other.A != 0) {
        A = other.A;
      }
      if (other.B != 0) {
        B = other.B;
      }
      if (other.C != 0) {
        C = other.C;
      }
      if (other.D != 0) {
        D = other.D;
      }
      if (other.E != 0) {
        E = other.E;
      }
      if (other.H != 0) {
        H = other.H;
      }
      if (other.L != 0) {
        L = other.L;
      }
      if (other.flags_ != null) {
        if (flags_ == null) {
          flags_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister();
        }
        Flags.MergeFrom(other.Flags);
      }
      if (other.ProgramCounter != 0) {
        ProgramCounter = other.ProgramCounter;
      }
      if (other.StackPointer != 0) {
        StackPointer = other.StackPointer;
      }
      if (other.InterruptFlipFlop1 != false) {
        InterruptFlipFlop1 = other.InterruptFlipFlop1;
      }
      if (other.InterruptFlipFlop2 != false) {
        InterruptFlipFlop2 = other.InterruptFlipFlop2;
      }
      if (other.InterruptMode != 0) {
        InterruptMode = other.InterruptMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            A = input.ReadUInt32();
            break;
          }
          case 16: {
            B = input.ReadUInt32();
            break;
          }
          case 24: {
            C = input.ReadUInt32();
            break;
          }
          case 32: {
            D = input.ReadUInt32();
            break;
          }
          case 40: {
            E = input.ReadUInt32();
            break;
          }
          case 48: {
            H = input.ReadUInt32();
            break;
          }
          case 56: {
            L = input.ReadUInt32();
            break;
          }
          case 66: {
            if (flags_ == null) {
              flags_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameBoyFlagsRegister();
            }
            input.ReadMessage(flags_);
            break;
          }
          case 72: {
            ProgramCounter = input.ReadUInt32();
            break;
          }
          case 80: {
            StackPointer = input.ReadUInt32();
            break;
          }
          case 88: {
            InterruptFlipFlop1 = input.ReadBool();
            break;
          }
          case 96: {
            InterruptFlipFlop2 = input.ReadBool();
            break;
          }
          case 104: {
            InterruptMode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The GameBoy flags regoster.
  /// </summary>
  public sealed partial class GameBoyFlagsRegister : pb::IMessage<GameBoyFlagsRegister> {
    private static readonly pb::MessageParser<GameBoyFlagsRegister> _parser = new pb::MessageParser<GameBoyFlagsRegister>(() => new GameBoyFlagsRegister());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyFlagsRegister> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Registers.GameboyEventDebuggerRegistersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyFlagsRegister() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyFlagsRegister(GameBoyFlagsRegister other) : this() {
      zero_ = other.zero_;
      halfCarry_ = other.halfCarry_;
      subtract_ = other.subtract_;
      carry_ = other.carry_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyFlagsRegister Clone() {
      return new GameBoyFlagsRegister(this);
    }

    /// <summary>Field number for the "zero" field.</summary>
    public const int ZeroFieldNumber = 1;
    private bool zero_;
    /// <summary>
    /// Z - Zero flag. Set if the value is zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Zero {
      get { return zero_; }
      set {
        zero_ = value;
      }
    }

    /// <summary>Field number for the "halfCarry" field.</summary>
    public const int HalfCarryFieldNumber = 2;
    private bool halfCarry_;
    /// <summary>
    /// H - Half Carry. Carry from bit 3 to bit 4.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HalfCarry {
      get { return halfCarry_; }
      set {
        halfCarry_ = value;
      }
    }

    /// <summary>Field number for the "subtract" field.</summary>
    public const int SubtractFieldNumber = 3;
    private bool subtract_;
    /// <summary>
    /// N - Subtract. Set if the last operation was a subtraction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Subtract {
      get { return subtract_; }
      set {
        subtract_ = value;
      }
    }

    /// <summary>Field number for the "carry" field.</summary>
    public const int CarryFieldNumber = 4;
    private bool carry_;
    /// <summary>
    /// C - Carry. Set if the result did not fit in the register.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Carry {
      get { return carry_; }
      set {
        carry_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyFlagsRegister);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyFlagsRegister other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Zero != other.Zero) return false;
      if (HalfCarry != other.HalfCarry) return false;
      if (Subtract != other.Subtract) return false;
      if (Carry != other.Carry) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Zero != false) hash ^= Zero.GetHashCode();
      if (HalfCarry != false) hash ^= HalfCarry.GetHashCode();
      if (Subtract != false) hash ^= Subtract.GetHashCode();
      if (Carry != false) hash ^= Carry.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Zero != false) {
        output.WriteRawTag(8);
        output.WriteBool(Zero);
      }
      if (HalfCarry != false) {
        output.WriteRawTag(16);
        output.WriteBool(HalfCarry);
      }
      if (Subtract != false) {
        output.WriteRawTag(24);
        output.WriteBool(Subtract);
      }
      if (Carry != false) {
        output.WriteRawTag(32);
        output.WriteBool(Carry);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Zero != false) {
        size += 1 + 1;
      }
      if (HalfCarry != false) {
        size += 1 + 1;
      }
      if (Subtract != false) {
        size += 1 + 1;
      }
      if (Carry != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyFlagsRegister other) {
      if (other == null) {
        return;
      }
      if (other.Zero != false) {
        Zero = other.Zero;
      }
      if (other.HalfCarry != false) {
        HalfCarry = other.HalfCarry;
      }
      if (other.Subtract != false) {
        Subtract = other.Subtract;
      }
      if (other.Carry != false) {
        Carry = other.Carry;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Zero = input.ReadBool();
            break;
          }
          case 16: {
            HalfCarry = input.ReadBool();
            break;
          }
          case 24: {
            Subtract = input.ReadBool();
            break;
          }
          case 32: {
            Carry = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
