// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.event.debugger.gpu.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu {

  /// <summary>Holder for reflection information generated from gameboy.event.debugger.gpu.proto</summary>
  public static partial class GameboyEventDebuggerGpuReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.event.debugger.gpu.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyEventDebuggerGpuReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBnYW1lYm95LmV2ZW50LmRlYnVnZ2VyLmdwdS5wcm90byKsAQoPR2FtZUJv",
            "eUdwdVN0YXRlEi4KDnJlbmRlclNldHRpbmdzGAEgASgLMhYuR2FtZUJveVJl",
            "bmRlclNldHRpbmdzEiUKD2JhY2tncm91bmRUaWxlcxgCIAMoCzIMLkdhbWVC",
            "b3lUaWxlEiEKC3Nwcml0ZVRpbGVzGAMgAygLMgwuR2FtZUJveVRpbGUSHwoH",
            "c3ByaXRlcxgEIAMoCzIOLkdhbWVCb3lTcHJpdGUi0wIKFUdhbWVCb3lSZW5k",
            "ZXJTZXR0aW5ncxIZChFiYWNrZ3JvdW5kRGlzcGxheRgBIAEoCBIVCg13aW5k",
            "b3dFbmFibGVkGAIgASgIEhYKDnNwcml0ZXNFbmFibGVkGAMgASgIEhQKDGxh",
            "cmdlU3ByaXRlcxgEIAEoCBIxChhiYWNrZ3JvdW5kVGlsZU1hcEFkZHJlc3MY",
            "BSABKAsyDy5UaWxlTWFwQWRkcmVzcxItChR3aW5kb3dUaWxlTWFwQWRkcmVz",
            "cxgGIAEoCzIPLlRpbGVNYXBBZGRyZXNzEhYKDnRpbGVTZXRBZGRyZXNzGAcg",
            "ASgNEhwKFHNwcml0ZVRpbGVTZXRBZGRyZXNzGAggASgNEhwKBnNjcm9sbBgJ",
            "IAEoCzIMLkNvb3JkaW5hdGVzEiQKDndpbmRvd1Bvc2l0aW9uGAogASgLMgwu",
            "Q29vcmRpbmF0ZXMiMwoOVGlsZU1hcEFkZHJlc3MSDwoHYWRkcmVzcxgBIAEo",
            "DRIQCghpc1NpZ25lZBgCIAEoCCIjCgtDb29yZGluYXRlcxIJCgF4GAEgASgN",
            "EgkKAXkYAiABKA0iiAEKDUdhbWVCb3lTcHJpdGUSCQoBeBgBIAEoDRIJCgF5",
            "GAIgASgNEhIKCnRpbGVOdW1iZXIYAyABKA0SGgoSYmFja2dyb3VuZFByaW9y",
            "aXR5GAQgASgIEg0KBXlGbGlwGAUgASgIEg0KBXhGbGlwGAYgASgIEhMKC3Vz",
            "ZVBhbGV0dGUxGAcgASgIIjIKC0dhbWVCb3lUaWxlEhIKCnRpbGVOdW1iZXIY",
            "ASABKA0SDwoHcGFsZXR0ZRgCIAEoDEI1qgIyUmV0cm8uTmV0LkFwaS5SZWFs",
            "VGltZS5NZXNzYWdlcy5FdmVudC5EZWJ1Z2dlci5HcHViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyGpuState.Parser, new[]{ "RenderSettings", "BackgroundTiles", "SpriteTiles", "Sprites" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings.Parser, new[]{ "BackgroundDisplay", "WindowEnabled", "SpritesEnabled", "LargeSprites", "BackgroundTileMapAddress", "WindowTileMapAddress", "TileSetAddress", "SpriteTileSetAddress", "Scroll", "WindowPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress.Parser, new[]{ "Address", "IsSigned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite.Parser, new[]{ "X", "Y", "TileNumber", "BackgroundPriority", "YFlip", "XFlip", "UsePalette1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile.Parser, new[]{ "TileNumber", "Palette" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameBoyGpuState : pb::IMessage<GameBoyGpuState> {
    private static readonly pb::MessageParser<GameBoyGpuState> _parser = new pb::MessageParser<GameBoyGpuState>(() => new GameBoyGpuState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyGpuState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuState(GameBoyGpuState other) : this() {
      RenderSettings = other.renderSettings_ != null ? other.RenderSettings.Clone() : null;
      backgroundTiles_ = other.backgroundTiles_.Clone();
      spriteTiles_ = other.spriteTiles_.Clone();
      sprites_ = other.sprites_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyGpuState Clone() {
      return new GameBoyGpuState(this);
    }

    /// <summary>Field number for the "renderSettings" field.</summary>
    public const int RenderSettingsFieldNumber = 1;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings renderSettings_;
    /// <summary>
    /// The GPU render settings.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings RenderSettings {
      get { return renderSettings_; }
      set {
        renderSettings_ = value;
      }
    }

    /// <summary>Field number for the "backgroundTiles" field.</summary>
    public const int BackgroundTilesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> _repeated_backgroundTiles_codec
        = pb::FieldCodec.ForMessage(18, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile.Parser);
    private readonly pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> backgroundTiles_ = new pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile>();
    /// <summary>
    /// The background tiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> BackgroundTiles {
      get { return backgroundTiles_; }
    }

    /// <summary>Field number for the "spriteTiles" field.</summary>
    public const int SpriteTilesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> _repeated_spriteTiles_codec
        = pb::FieldCodec.ForMessage(26, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile.Parser);
    private readonly pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> spriteTiles_ = new pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile>();
    /// <summary>
    /// The sprite tiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyTile> SpriteTiles {
      get { return spriteTiles_; }
    }

    /// <summary>Field number for the "sprites" field.</summary>
    public const int SpritesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite> _repeated_sprites_codec
        = pb::FieldCodec.ForMessage(34, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite.Parser);
    private readonly pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite> sprites_ = new pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite>();
    /// <summary>
    /// The sprites (OAM).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoySprite> Sprites {
      get { return sprites_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyGpuState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyGpuState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RenderSettings, other.RenderSettings)) return false;
      if(!backgroundTiles_.Equals(other.backgroundTiles_)) return false;
      if(!spriteTiles_.Equals(other.spriteTiles_)) return false;
      if(!sprites_.Equals(other.sprites_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (renderSettings_ != null) hash ^= RenderSettings.GetHashCode();
      hash ^= backgroundTiles_.GetHashCode();
      hash ^= spriteTiles_.GetHashCode();
      hash ^= sprites_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (renderSettings_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RenderSettings);
      }
      backgroundTiles_.WriteTo(output, _repeated_backgroundTiles_codec);
      spriteTiles_.WriteTo(output, _repeated_spriteTiles_codec);
      sprites_.WriteTo(output, _repeated_sprites_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (renderSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderSettings);
      }
      size += backgroundTiles_.CalculateSize(_repeated_backgroundTiles_codec);
      size += spriteTiles_.CalculateSize(_repeated_spriteTiles_codec);
      size += sprites_.CalculateSize(_repeated_sprites_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyGpuState other) {
      if (other == null) {
        return;
      }
      if (other.renderSettings_ != null) {
        if (renderSettings_ == null) {
          renderSettings_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings();
        }
        RenderSettings.MergeFrom(other.RenderSettings);
      }
      backgroundTiles_.Add(other.backgroundTiles_);
      spriteTiles_.Add(other.spriteTiles_);
      sprites_.Add(other.sprites_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (renderSettings_ == null) {
              renderSettings_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameBoyRenderSettings();
            }
            input.ReadMessage(renderSettings_);
            break;
          }
          case 18: {
            backgroundTiles_.AddEntriesFrom(input, _repeated_backgroundTiles_codec);
            break;
          }
          case 26: {
            spriteTiles_.AddEntriesFrom(input, _repeated_spriteTiles_codec);
            break;
          }
          case 34: {
            sprites_.AddEntriesFrom(input, _repeated_sprites_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// GameBoy GPU render settings.
  /// </summary>
  public sealed partial class GameBoyRenderSettings : pb::IMessage<GameBoyRenderSettings> {
    private static readonly pb::MessageParser<GameBoyRenderSettings> _parser = new pb::MessageParser<GameBoyRenderSettings>(() => new GameBoyRenderSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyRenderSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRenderSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRenderSettings(GameBoyRenderSettings other) : this() {
      backgroundDisplay_ = other.backgroundDisplay_;
      windowEnabled_ = other.windowEnabled_;
      spritesEnabled_ = other.spritesEnabled_;
      largeSprites_ = other.largeSprites_;
      BackgroundTileMapAddress = other.backgroundTileMapAddress_ != null ? other.BackgroundTileMapAddress.Clone() : null;
      WindowTileMapAddress = other.windowTileMapAddress_ != null ? other.WindowTileMapAddress.Clone() : null;
      tileSetAddress_ = other.tileSetAddress_;
      spriteTileSetAddress_ = other.spriteTileSetAddress_;
      Scroll = other.scroll_ != null ? other.Scroll.Clone() : null;
      WindowPosition = other.windowPosition_ != null ? other.WindowPosition.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyRenderSettings Clone() {
      return new GameBoyRenderSettings(this);
    }

    /// <summary>Field number for the "backgroundDisplay" field.</summary>
    public const int BackgroundDisplayFieldNumber = 1;
    private bool backgroundDisplay_;
    /// <summary>
    /// Indicates whether the background should be displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackgroundDisplay {
      get { return backgroundDisplay_; }
      set {
        backgroundDisplay_ = value;
      }
    }

    /// <summary>Field number for the "windowEnabled" field.</summary>
    public const int WindowEnabledFieldNumber = 2;
    private bool windowEnabled_;
    /// <summary>
    /// Indicates whether the window should be displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WindowEnabled {
      get { return windowEnabled_; }
      set {
        windowEnabled_ = value;
      }
    }

    /// <summary>Field number for the "spritesEnabled" field.</summary>
    public const int SpritesEnabledFieldNumber = 3;
    private bool spritesEnabled_;
    /// <summary>
    /// Indicates whether sprites are enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpritesEnabled {
      get { return spritesEnabled_; }
      set {
        spritesEnabled_ = value;
      }
    }

    /// <summary>Field number for the "largeSprites" field.</summary>
    public const int LargeSpritesFieldNumber = 4;
    private bool largeSprites_;
    /// <summary>
    /// Indicates whether large sprites are enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LargeSprites {
      get { return largeSprites_; }
      set {
        largeSprites_ = value;
      }
    }

    /// <summary>Field number for the "backgroundTileMapAddress" field.</summary>
    public const int BackgroundTileMapAddressFieldNumber = 5;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress backgroundTileMapAddress_;
    /// <summary>
    /// The address of 0x400 byte the background tile map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress BackgroundTileMapAddress {
      get { return backgroundTileMapAddress_; }
      set {
        backgroundTileMapAddress_ = value;
      }
    }

    /// <summary>Field number for the "windowTileMapAddress" field.</summary>
    public const int WindowTileMapAddressFieldNumber = 6;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress windowTileMapAddress_;
    /// <summary>
    /// The address of 0x400 byte the window tile map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress WindowTileMapAddress {
      get { return windowTileMapAddress_; }
      set {
        windowTileMapAddress_ = value;
      }
    }

    /// <summary>Field number for the "tileSetAddress" field.</summary>
    public const int TileSetAddressFieldNumber = 7;
    private uint tileSetAddress_;
    /// <summary>
    /// The address of the 0x1000 byte window and background tile set. I.e. 64 tiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TileSetAddress {
      get { return tileSetAddress_; }
      set {
        tileSetAddress_ = value;
      }
    }

    /// <summary>Field number for the "spriteTileSetAddress" field.</summary>
    public const int SpriteTileSetAddressFieldNumber = 8;
    private uint spriteTileSetAddress_;
    /// <summary>
    /// The address of the 0x1000 byte tile set. I.e. 64 tiles.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpriteTileSetAddress {
      get { return spriteTileSetAddress_; }
      set {
        spriteTileSetAddress_ = value;
      }
    }

    /// <summary>Field number for the "scroll" field.</summary>
    public const int ScrollFieldNumber = 9;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates scroll_;
    /// <summary>
    /// The scroll coordinates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates Scroll {
      get { return scroll_; }
      set {
        scroll_ = value;
      }
    }

    /// <summary>Field number for the "windowPosition" field.</summary>
    public const int WindowPositionFieldNumber = 10;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates windowPosition_;
    /// <summary>
    /// The window coordinates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates WindowPosition {
      get { return windowPosition_; }
      set {
        windowPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyRenderSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyRenderSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackgroundDisplay != other.BackgroundDisplay) return false;
      if (WindowEnabled != other.WindowEnabled) return false;
      if (SpritesEnabled != other.SpritesEnabled) return false;
      if (LargeSprites != other.LargeSprites) return false;
      if (!object.Equals(BackgroundTileMapAddress, other.BackgroundTileMapAddress)) return false;
      if (!object.Equals(WindowTileMapAddress, other.WindowTileMapAddress)) return false;
      if (TileSetAddress != other.TileSetAddress) return false;
      if (SpriteTileSetAddress != other.SpriteTileSetAddress) return false;
      if (!object.Equals(Scroll, other.Scroll)) return false;
      if (!object.Equals(WindowPosition, other.WindowPosition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackgroundDisplay != false) hash ^= BackgroundDisplay.GetHashCode();
      if (WindowEnabled != false) hash ^= WindowEnabled.GetHashCode();
      if (SpritesEnabled != false) hash ^= SpritesEnabled.GetHashCode();
      if (LargeSprites != false) hash ^= LargeSprites.GetHashCode();
      if (backgroundTileMapAddress_ != null) hash ^= BackgroundTileMapAddress.GetHashCode();
      if (windowTileMapAddress_ != null) hash ^= WindowTileMapAddress.GetHashCode();
      if (TileSetAddress != 0) hash ^= TileSetAddress.GetHashCode();
      if (SpriteTileSetAddress != 0) hash ^= SpriteTileSetAddress.GetHashCode();
      if (scroll_ != null) hash ^= Scroll.GetHashCode();
      if (windowPosition_ != null) hash ^= WindowPosition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BackgroundDisplay != false) {
        output.WriteRawTag(8);
        output.WriteBool(BackgroundDisplay);
      }
      if (WindowEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(WindowEnabled);
      }
      if (SpritesEnabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(SpritesEnabled);
      }
      if (LargeSprites != false) {
        output.WriteRawTag(32);
        output.WriteBool(LargeSprites);
      }
      if (backgroundTileMapAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BackgroundTileMapAddress);
      }
      if (windowTileMapAddress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(WindowTileMapAddress);
      }
      if (TileSetAddress != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(TileSetAddress);
      }
      if (SpriteTileSetAddress != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SpriteTileSetAddress);
      }
      if (scroll_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Scroll);
      }
      if (windowPosition_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WindowPosition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackgroundDisplay != false) {
        size += 1 + 1;
      }
      if (WindowEnabled != false) {
        size += 1 + 1;
      }
      if (SpritesEnabled != false) {
        size += 1 + 1;
      }
      if (LargeSprites != false) {
        size += 1 + 1;
      }
      if (backgroundTileMapAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundTileMapAddress);
      }
      if (windowTileMapAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowTileMapAddress);
      }
      if (TileSetAddress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TileSetAddress);
      }
      if (SpriteTileSetAddress != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpriteTileSetAddress);
      }
      if (scroll_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scroll);
      }
      if (windowPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowPosition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyRenderSettings other) {
      if (other == null) {
        return;
      }
      if (other.BackgroundDisplay != false) {
        BackgroundDisplay = other.BackgroundDisplay;
      }
      if (other.WindowEnabled != false) {
        WindowEnabled = other.WindowEnabled;
      }
      if (other.SpritesEnabled != false) {
        SpritesEnabled = other.SpritesEnabled;
      }
      if (other.LargeSprites != false) {
        LargeSprites = other.LargeSprites;
      }
      if (other.backgroundTileMapAddress_ != null) {
        if (backgroundTileMapAddress_ == null) {
          backgroundTileMapAddress_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress();
        }
        BackgroundTileMapAddress.MergeFrom(other.BackgroundTileMapAddress);
      }
      if (other.windowTileMapAddress_ != null) {
        if (windowTileMapAddress_ == null) {
          windowTileMapAddress_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress();
        }
        WindowTileMapAddress.MergeFrom(other.WindowTileMapAddress);
      }
      if (other.TileSetAddress != 0) {
        TileSetAddress = other.TileSetAddress;
      }
      if (other.SpriteTileSetAddress != 0) {
        SpriteTileSetAddress = other.SpriteTileSetAddress;
      }
      if (other.scroll_ != null) {
        if (scroll_ == null) {
          scroll_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates();
        }
        Scroll.MergeFrom(other.Scroll);
      }
      if (other.windowPosition_ != null) {
        if (windowPosition_ == null) {
          windowPosition_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates();
        }
        WindowPosition.MergeFrom(other.WindowPosition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BackgroundDisplay = input.ReadBool();
            break;
          }
          case 16: {
            WindowEnabled = input.ReadBool();
            break;
          }
          case 24: {
            SpritesEnabled = input.ReadBool();
            break;
          }
          case 32: {
            LargeSprites = input.ReadBool();
            break;
          }
          case 42: {
            if (backgroundTileMapAddress_ == null) {
              backgroundTileMapAddress_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress();
            }
            input.ReadMessage(backgroundTileMapAddress_);
            break;
          }
          case 50: {
            if (windowTileMapAddress_ == null) {
              windowTileMapAddress_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.TileMapAddress();
            }
            input.ReadMessage(windowTileMapAddress_);
            break;
          }
          case 56: {
            TileSetAddress = input.ReadUInt32();
            break;
          }
          case 64: {
            SpriteTileSetAddress = input.ReadUInt32();
            break;
          }
          case 74: {
            if (scroll_ == null) {
              scroll_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates();
            }
            input.ReadMessage(scroll_);
            break;
          }
          case 82: {
            if (windowPosition_ == null) {
              windowPosition_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.Coordinates();
            }
            input.ReadMessage(windowPosition_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A tile map address.
  /// </summary>
  public sealed partial class TileMapAddress : pb::IMessage<TileMapAddress> {
    private static readonly pb::MessageParser<TileMapAddress> _parser = new pb::MessageParser<TileMapAddress>(() => new TileMapAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileMapAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileMapAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileMapAddress(TileMapAddress other) : this() {
      address_ = other.address_;
      isSigned_ = other.isSigned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileMapAddress Clone() {
      return new TileMapAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    /// <summary>
    /// The address of the tile map.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "isSigned" field.</summary>
    public const int IsSignedFieldNumber = 2;
    private bool isSigned_;
    /// <summary>
    /// Indicates that the tile map is signed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSigned {
      get { return isSigned_; }
      set {
        isSigned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileMapAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileMapAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (IsSigned != other.IsSigned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (IsSigned != false) hash ^= IsSigned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (IsSigned != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSigned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (IsSigned != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileMapAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.IsSigned != false) {
        IsSigned = other.IsSigned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
          case 16: {
            IsSigned = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Cartesian 2D coordinates.
  /// </summary>
  public sealed partial class Coordinates : pb::IMessage<Coordinates> {
    private static readonly pb::MessageParser<Coordinates> _parser = new pb::MessageParser<Coordinates>(() => new Coordinates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coordinates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinates(Coordinates other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coordinates Clone() {
      return new Coordinates(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    /// <summary>
    /// The x coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    /// <summary>
    /// The y coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coordinates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coordinates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coordinates other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A GameBoy sprite.
  /// </summary>
  public sealed partial class GameBoySprite : pb::IMessage<GameBoySprite> {
    private static readonly pb::MessageParser<GameBoySprite> _parser = new pb::MessageParser<GameBoySprite>(() => new GameBoySprite());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoySprite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoySprite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoySprite(GameBoySprite other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      tileNumber_ = other.tileNumber_;
      backgroundPriority_ = other.backgroundPriority_;
      yFlip_ = other.yFlip_;
      xFlip_ = other.xFlip_;
      usePalette1_ = other.usePalette1_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoySprite Clone() {
      return new GameBoySprite(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    /// <summary>
    /// The x coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    /// <summary>
    /// The y coordinate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "tileNumber" field.</summary>
    public const int TileNumberFieldNumber = 3;
    private uint tileNumber_;
    /// <summary>
    /// The tile number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TileNumber {
      get { return tileNumber_; }
      set {
        tileNumber_ = value;
      }
    }

    /// <summary>Field number for the "backgroundPriority" field.</summary>
    public const int BackgroundPriorityFieldNumber = 4;
    private bool backgroundPriority_;
    /// <summary>
    /// Indicates whether the sprite (except colour 0) is above or below the background.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackgroundPriority {
      get { return backgroundPriority_; }
      set {
        backgroundPriority_ = value;
      }
    }

    /// <summary>Field number for the "yFlip" field.</summary>
    public const int YFlipFieldNumber = 5;
    private bool yFlip_;
    /// <summary>
    /// Indicates whether the sprite is flipped in the vertical (y) direction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool YFlip {
      get { return yFlip_; }
      set {
        yFlip_ = value;
      }
    }

    /// <summary>Field number for the "xFlip" field.</summary>
    public const int XFlipFieldNumber = 6;
    private bool xFlip_;
    /// <summary>
    /// Indicates whether the sprite is flipped in the horizontal (x) direction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XFlip {
      get { return xFlip_; }
      set {
        xFlip_ = value;
      }
    }

    /// <summary>Field number for the "usePalette1" field.</summary>
    public const int UsePalette1FieldNumber = 7;
    private bool usePalette1_;
    /// <summary>
    /// Indicates whether the sprite should use sprite palette 1 or 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePalette1 {
      get { return usePalette1_; }
      set {
        usePalette1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoySprite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoySprite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (TileNumber != other.TileNumber) return false;
      if (BackgroundPriority != other.BackgroundPriority) return false;
      if (YFlip != other.YFlip) return false;
      if (XFlip != other.XFlip) return false;
      if (UsePalette1 != other.UsePalette1) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (TileNumber != 0) hash ^= TileNumber.GetHashCode();
      if (BackgroundPriority != false) hash ^= BackgroundPriority.GetHashCode();
      if (YFlip != false) hash ^= YFlip.GetHashCode();
      if (XFlip != false) hash ^= XFlip.GetHashCode();
      if (UsePalette1 != false) hash ^= UsePalette1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (TileNumber != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TileNumber);
      }
      if (BackgroundPriority != false) {
        output.WriteRawTag(32);
        output.WriteBool(BackgroundPriority);
      }
      if (YFlip != false) {
        output.WriteRawTag(40);
        output.WriteBool(YFlip);
      }
      if (XFlip != false) {
        output.WriteRawTag(48);
        output.WriteBool(XFlip);
      }
      if (UsePalette1 != false) {
        output.WriteRawTag(56);
        output.WriteBool(UsePalette1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (TileNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TileNumber);
      }
      if (BackgroundPriority != false) {
        size += 1 + 1;
      }
      if (YFlip != false) {
        size += 1 + 1;
      }
      if (XFlip != false) {
        size += 1 + 1;
      }
      if (UsePalette1 != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoySprite other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.TileNumber != 0) {
        TileNumber = other.TileNumber;
      }
      if (other.BackgroundPriority != false) {
        BackgroundPriority = other.BackgroundPriority;
      }
      if (other.YFlip != false) {
        YFlip = other.YFlip;
      }
      if (other.XFlip != false) {
        XFlip = other.XFlip;
      }
      if (other.UsePalette1 != false) {
        UsePalette1 = other.UsePalette1;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
          case 24: {
            TileNumber = input.ReadUInt32();
            break;
          }
          case 32: {
            BackgroundPriority = input.ReadBool();
            break;
          }
          case 40: {
            YFlip = input.ReadBool();
            break;
          }
          case 48: {
            XFlip = input.ReadBool();
            break;
          }
          case 56: {
            UsePalette1 = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An 8*8=64 byte GameBoy GPU background/window/sprite tile structure.
  /// </summary>
  public sealed partial class GameBoyTile : pb::IMessage<GameBoyTile> {
    private static readonly pb::MessageParser<GameBoyTile> _parser = new pb::MessageParser<GameBoyTile>(() => new GameBoyTile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyTile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Gpu.GameboyEventDebuggerGpuReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyTile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyTile(GameBoyTile other) : this() {
      tileNumber_ = other.tileNumber_;
      palette_ = other.palette_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyTile Clone() {
      return new GameBoyTile(this);
    }

    /// <summary>Field number for the "tileNumber" field.</summary>
    public const int TileNumberFieldNumber = 1;
    private uint tileNumber_;
    /// <summary>
    /// The tile number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TileNumber {
      get { return tileNumber_; }
      set {
        tileNumber_ = value;
      }
    }

    /// <summary>Field number for the "palette" field.</summary>
    public const int PaletteFieldNumber = 2;
    private pb::ByteString palette_ = pb::ByteString.Empty;
    /// <summary>
    /// A flat, 64 byte array of the tile palette. Access via row * 8 + column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Palette {
      get { return palette_; }
      set {
        palette_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyTile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyTile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TileNumber != other.TileNumber) return false;
      if (Palette != other.Palette) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TileNumber != 0) hash ^= TileNumber.GetHashCode();
      if (Palette.Length != 0) hash ^= Palette.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TileNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TileNumber);
      }
      if (Palette.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Palette);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TileNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TileNumber);
      }
      if (Palette.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Palette);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyTile other) {
      if (other == null) {
        return;
      }
      if (other.TileNumber != 0) {
        TileNumber = other.TileNumber;
      }
      if (other.Palette.Length != 0) {
        Palette = other.Palette;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TileNumber = input.ReadUInt32();
            break;
          }
          case 18: {
            Palette = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
