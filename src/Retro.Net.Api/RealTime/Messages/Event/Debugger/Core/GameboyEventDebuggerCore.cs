// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.event.debugger.core.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Event.Debugger.Core {

  /// <summary>Holder for reflection information generated from gameboy.event.debugger.core.proto</summary>
  public static partial class GameboyEventDebuggerCoreReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.event.debugger.core.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyEventDebuggerCoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFnYW1lYm95LmV2ZW50LmRlYnVnZ2VyLmNvcmUucHJvdG8iygEKF0dhbWVC",
            "b3lJbnN0cnVjdGlvbkJsb2NrEg8KB2FkZHJlc3MYASABKA0SDgoGbGVuZ3Ro",
            "GAIgASgNEg8KB2hhbHRDcHUYAyABKAgSFwoPaGFsdFBlcmlwaGVyYWxzGAQg",
            "ASgIEhEKCWRlYnVnSW5mbxgFIAEoCRIlCgpvcGVyYXRpb25zGAYgAygLMhEu",
            "R2FtZUJveU9wZXJhdGlvbhIqCgd0aW1pbmdzGAcgASgLMhkuR2FtZUJveUlu",
            "dHJ1Y3Rpb25UaW1pbmdzIjYKEEdhbWVCb3lPcGVyYXRpb24SDwoHYWRkcmVz",
            "cxgBIAEoDRIRCglvcGVyYXRpb24YAiABKAkiSwoYR2FtZUJveUludHJ1Y3Rp",
            "b25UaW1pbmdzEhUKDW1hY2hpbmVDeWNsZXMYASABKA0SGAoQdGhyb3R0bGlu",
            "Z1N0YXRlcxgCIAEoDUI2qgIzUmV0cm8uTmV0LkFwaS5SZWFsVGltZS5NZXNz",
            "YWdlcy5FdmVudC5EZWJ1Z2dlci5Db3JlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyInstructionBlock.Parser, new[]{ "Address", "Length", "HaltCpu", "HaltPeripherals", "DebugInfo", "Operations", "Timings" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation.Parser, new[]{ "Address", "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings), global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings.Parser, new[]{ "MachineCycles", "ThrottlingStates" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An instruction block.
  /// </summary>
  public sealed partial class GameBoyInstructionBlock : pb::IMessage<GameBoyInstructionBlock> {
    private static readonly pb::MessageParser<GameBoyInstructionBlock> _parser = new pb::MessageParser<GameBoyInstructionBlock>(() => new GameBoyInstructionBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyInstructionBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameboyEventDebuggerCoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyInstructionBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyInstructionBlock(GameBoyInstructionBlock other) : this() {
      address_ = other.address_;
      length_ = other.length_;
      haltCpu_ = other.haltCpu_;
      haltPeripherals_ = other.haltPeripherals_;
      debugInfo_ = other.debugInfo_;
      operations_ = other.operations_.Clone();
      Timings = other.timings_ != null ? other.Timings.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyInstructionBlock Clone() {
      return new GameBoyInstructionBlock(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    /// <summary>
    /// The address of the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private uint length_;
    /// <summary>
    /// The length of the block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "haltCpu" field.</summary>
    public const int HaltCpuFieldNumber = 3;
    private bool haltCpu_;
    /// <summary>
    /// Indicates whetehr this block will halt the CPU.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaltCpu {
      get { return haltCpu_; }
      set {
        haltCpu_ = value;
      }
    }

    /// <summary>Field number for the "haltPeripherals" field.</summary>
    public const int HaltPeripheralsFieldNumber = 4;
    private bool haltPeripherals_;
    /// <summary>
    /// Indicates whetehr this block will halt the peripherals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HaltPeripherals {
      get { return haltPeripherals_; }
      set {
        haltPeripherals_ = value;
      }
    }

    /// <summary>Field number for the "debugInfo" field.</summary>
    public const int DebugInfoFieldNumber = 5;
    private string debugInfo_ = "";
    /// <summary>
    /// The debug info string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(50, global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation.Parser);
    private readonly pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation> operations_ = new pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation>();
    /// <summary>
    /// The operations executed in this block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyOperation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "timings" field.</summary>
    public const int TimingsFieldNumber = 7;
    private global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings timings_;
    /// <summary>
    /// Timings of this instruction block.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings Timings {
      get { return timings_; }
      set {
        timings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyInstructionBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyInstructionBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Length != other.Length) return false;
      if (HaltCpu != other.HaltCpu) return false;
      if (HaltPeripherals != other.HaltPeripherals) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if(!operations_.Equals(other.operations_)) return false;
      if (!object.Equals(Timings, other.Timings)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (HaltCpu != false) hash ^= HaltCpu.GetHashCode();
      if (HaltPeripherals != false) hash ^= HaltPeripherals.GetHashCode();
      if (DebugInfo.Length != 0) hash ^= DebugInfo.GetHashCode();
      hash ^= operations_.GetHashCode();
      if (timings_ != null) hash ^= Timings.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Length);
      }
      if (HaltCpu != false) {
        output.WriteRawTag(24);
        output.WriteBool(HaltCpu);
      }
      if (HaltPeripherals != false) {
        output.WriteRawTag(32);
        output.WriteBool(HaltPeripherals);
      }
      if (DebugInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DebugInfo);
      }
      operations_.WriteTo(output, _repeated_operations_codec);
      if (timings_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Timings);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Length);
      }
      if (HaltCpu != false) {
        size += 1 + 1;
      }
      if (HaltPeripherals != false) {
        size += 1 + 1;
      }
      if (DebugInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugInfo);
      }
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (timings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timings);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyInstructionBlock other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.HaltCpu != false) {
        HaltCpu = other.HaltCpu;
      }
      if (other.HaltPeripherals != false) {
        HaltPeripherals = other.HaltPeripherals;
      }
      if (other.DebugInfo.Length != 0) {
        DebugInfo = other.DebugInfo;
      }
      operations_.Add(other.operations_);
      if (other.timings_ != null) {
        if (timings_ == null) {
          timings_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings();
        }
        Timings.MergeFrom(other.Timings);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
          case 16: {
            Length = input.ReadUInt32();
            break;
          }
          case 24: {
            HaltCpu = input.ReadBool();
            break;
          }
          case 32: {
            HaltPeripherals = input.ReadBool();
            break;
          }
          case 42: {
            DebugInfo = input.ReadString();
            break;
          }
          case 50: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 58: {
            if (timings_ == null) {
              timings_ = new global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameBoyIntructionTimings();
            }
            input.ReadMessage(timings_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// An operation executed by a GameBoy.
  /// </summary>
  public sealed partial class GameBoyOperation : pb::IMessage<GameBoyOperation> {
    private static readonly pb::MessageParser<GameBoyOperation> _parser = new pb::MessageParser<GameBoyOperation>(() => new GameBoyOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameboyEventDebuggerCoreReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyOperation(GameBoyOperation other) : this() {
      address_ = other.address_;
      operation_ = other.operation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyOperation Clone() {
      return new GameBoyOperation(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private uint address_;
    /// <summary>
    /// The address of the operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 2;
    private string operation_ = "";
    /// <summary>
    /// The mnemonic and operands that form this operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Operation {
      get { return operation_; }
      set {
        operation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Operation != other.Operation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address != 0) hash ^= Address.GetHashCode();
      if (Operation.Length != 0) hash ^= Operation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Address);
      }
      if (Operation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Operation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Address);
      }
      if (Operation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Operation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyOperation other) {
      if (other == null) {
        return;
      }
      if (other.Address != 0) {
        Address = other.Address;
      }
      if (other.Operation.Length != 0) {
        Operation = other.Operation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Address = input.ReadUInt32();
            break;
          }
          case 18: {
            Operation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Timings of an instruction block.
  /// </summary>
  public sealed partial class GameBoyIntructionTimings : pb::IMessage<GameBoyIntructionTimings> {
    private static readonly pb::MessageParser<GameBoyIntructionTimings> _parser = new pb::MessageParser<GameBoyIntructionTimings>(() => new GameBoyIntructionTimings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyIntructionTimings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Event.Debugger.Core.GameboyEventDebuggerCoreReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyIntructionTimings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyIntructionTimings(GameBoyIntructionTimings other) : this() {
      machineCycles_ = other.machineCycles_;
      throttlingStates_ = other.throttlingStates_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyIntructionTimings Clone() {
      return new GameBoyIntructionTimings(this);
    }

    /// <summary>Field number for the "machineCycles" field.</summary>
    public const int MachineCyclesFieldNumber = 1;
    private uint machineCycles_;
    /// <summary>
    /// The number of machine cycles executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MachineCycles {
      get { return machineCycles_; }
      set {
        machineCycles_ = value;
      }
    }

    /// <summary>Field number for the "throttlingStates" field.</summary>
    public const int ThrottlingStatesFieldNumber = 2;
    private uint throttlingStates_;
    /// <summary>
    /// The number of throttling states executed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThrottlingStates {
      get { return throttlingStates_; }
      set {
        throttlingStates_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyIntructionTimings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyIntructionTimings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MachineCycles != other.MachineCycles) return false;
      if (ThrottlingStates != other.ThrottlingStates) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MachineCycles != 0) hash ^= MachineCycles.GetHashCode();
      if (ThrottlingStates != 0) hash ^= ThrottlingStates.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MachineCycles != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MachineCycles);
      }
      if (ThrottlingStates != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ThrottlingStates);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MachineCycles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MachineCycles);
      }
      if (ThrottlingStates != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThrottlingStates);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyIntructionTimings other) {
      if (other == null) {
        return;
      }
      if (other.MachineCycles != 0) {
        MachineCycles = other.MachineCycles;
      }
      if (other.ThrottlingStates != 0) {
        ThrottlingStates = other.ThrottlingStates;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MachineCycles = input.ReadUInt32();
            break;
          }
          case 16: {
            ThrottlingStates = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
